<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>asmt_assessment_instance</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="asmt_assessment_instance">stateCHANGESTOcomplete^EQ<item display_value="Complete" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="complete"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>CheckForCompletedAttestations</name>
        <order>300</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var incompleteAtts = -1;
	
	//Check to see if there are any incomplete attestations for the entity
	var grAttestations = new GlideAggregate('asmt_assessment_instance');
	grAttestations.addQuery('state','IN','ready,wip');
	grAttestations.addQuery('sn_grc_profile', current.sn_grc_profile);
	grAttestations.addQuery('metric_type.evaluation_method','attestation_v2');
	grAttestations.addAggregate('COUNT');
	grAttestations.query();
	
	while (grAttestations.next())
	{
		incompleteAtts = grAttestations.getAggregate('COUNT');
		if (incompleteAtts == 0)
		{
			//Get the validation record
			var grValidation = new GlideRecord('x_631631_grc_contr_supplier_validation');
// 			gs.addInfoMessage('Supplier SID: ' + current.sn_grc_profile.applies_to);
			grValidation.get('supplier', current.sn_grc_profile.applies_to);

			//Set the completion date
			if (grValidation)
			{
// 				gs.addInfoMessage(grValidation.sys_id);
				grValidation.attestations_completed = new GlideDateTime();
				grValidation.update();
// 				gs.addInfoMessage('here');
			}
		}
	}
	
// 	gs.addInfoMessage('incompleteAtts: ' + incompleteAtts);

	
	
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-08 21:57:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d366d4509761e1108c6e7b771153afda</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>CheckForCompletedAttestations</sys_name>
        <sys_overrides/>
        <sys_package display_value="GRC Contracts and Suppliers" source="x_631631_grc_contr">aa57675a97dd11108c6e7b771153af5d</sys_package>
        <sys_policy/>
        <sys_scope display_value="GRC Contracts and Suppliers">aa57675a97dd11108c6e7b771153af5d</sys_scope>
        <sys_update_name>sys_script_d366d4509761e1108c6e7b771153afda</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-03 10:21:06</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d366d4509761e1108c6e7b771153afda"/>
</record_update>
