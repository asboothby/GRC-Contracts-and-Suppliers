<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_631631_grc_contr_contract</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>grc_contract_metrics events</name>
        <order>500</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[queueMetricUpdate();

function queueMetricUpdate() {    
// 	var gru =  new global.GlideScriptRecordUtil.get(current);
// 	var fieldsChanged = gru.getChangedFieldNames();
// 	var gr = getDefinitions(fieldsChanged);
// 	fields = '';
// 	while (gr.next())
// 		fields += gr.field + ',';
	
// 	if (fields.length > 0) {
// 		fields = '[' + fields.substring(0, fields.length - 1) + ']';
// 		gs.eventQueue('metric.update', current, fields, current.sys_mod_count, 'metric_update');
// 	}
	gs.info(current.state + ' ' + previous.state + ' ');
	if(current.state != previous.state && current.state=='grc_baselined')
	{
		var start = new GlideDateTime(current.sys_created_on);
		var end = new GlideDateTime(current.baseline_date);
		var daysToBaseline = GlideDateTime.subtract(start, end);
		gs.addInfoMessage('This should produce a metric instance');
		gs.addInfoMessage('Time to baseline in days: ' + daysToBaseline.getRoundedDayPart());
		gs.eventQueue('global.metric.update', current, '[baseline_date]', daysToBaseline.getRoundedDayPart(), 'metric_update');
	}
}

function getDefinitions(fields) {
	var gr = new GlideAggregate('metric_definition');
	gr.addActiveQuery();
	var tables = GlideDBObjectManager.getTables(current.getTableName());
	gr.addQuery('table', tables);
	gr.addQuery('field', fields);
	gr.groupBy('field');
	gr.query();
	return gr;
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-07 12:24:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2a420d6d977111108c6e7b771153af8e</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>grc_contract_metrics events</sys_name>
        <sys_overrides/>
        <sys_package display_value="GRC Contracts and Suppliers" source="x_631631_grc_contr">aa57675a97dd11108c6e7b771153af5d</sys_package>
        <sys_policy/>
        <sys_scope display_value="GRC Contracts and Suppliers">aa57675a97dd11108c6e7b771153af5d</sys_scope>
        <sys_update_name>sys_script_2a420d6d977111108c6e7b771153af8e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-08 09:46:59</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2a420d6d977111108c6e7b771153af8e"/>
</record_update>
