<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_631631_grc_contr_contract</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_631631_grc_contr_contract">cui_suppliersVALCHANGES^EQ<item endquery="false" field="cui_suppliers" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Set Has Red Suppliers from Contract</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Get aggregate of suppliers with Red status
	
	var si = new ContractSlfUtilBase();
	var badCount = si.checkBadSuppliers(current.sys_id);
	gs.info('badCount: ' + badCount);
	if(badCount > 0) gs.addErrorMessage(current.title + ' has ' + badCount + ' Red Supplier(s)!');
	
// 	var grSupplier = new GlideAggregate('x_631631_grc_contr_supplier');
// 	grSupplier.addAggregate('COUNT');
// 	grSupplier.addQuery('cyber_security_self_assessment_rating', 'Red');
// 	grSupplier.addQuery('sys_id', 'IN', current.cui_suppliers);
// 	grSupplier.query();
	
// 	//update has red suppliers field based on query results
// 	while(grSupplier.next())
// 	{
// 		var redCount = grSupplier.getAggregate('COUNT');
// 		if(redCount > 0)
// 		{
// 			gs.addInfoMessage(current.title + ' has ' + redCount + ' Red Supplier(s)!');
// 			current.has_red_suppliers = 'true';
// 		}
// 		else
// 		{
// 			current.has_red_suppliers = 'false';
// 		}
// 		current.update();
// 	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-20 09:03:04</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f0ad0f21970251108c6e7b771153aff4</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Set Has Red Suppliers from Contract</sys_name>
        <sys_overrides/>
        <sys_package display_value="GRC Contracts and Suppliers" source="x_631631_grc_contr">aa57675a97dd11108c6e7b771153af5d</sys_package>
        <sys_policy/>
        <sys_scope display_value="GRC Contracts and Suppliers">aa57675a97dd11108c6e7b771153af5d</sys_scope>
        <sys_update_name>sys_script_f0ad0f21970251108c6e7b771153aff4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-20 11:40:56</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f0ad0f21970251108c6e7b771153aff4"/>
</record_update>
